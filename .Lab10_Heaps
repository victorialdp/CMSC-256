package cmsc256;

public class MinHeap <E extends Comparable<? super E>> {

	//array w heap's element
	private E[]heap;
	//heap's current size
	private int size = 0;
	//default capacity for the array
	private static final int DEFAULT_CAPACITY = 8;
	
	//constructor (client sets initial capacity of heap)
	@SuppressWarnings("unchecked")
	public MinHeap(int capacity) {
		if(capacity > 0) {
			Object[] temp;		//create Object array due to type
			temp = new Comparable[capacity];	//type erasure
			heap = (E[]) temp;					//cast to generic type
		}
		else {
			throw new IllegalArgumentException("Array size must be greater than 0.");
		}
	}
	
	//parameterless constructor
	public MinHeap() {
		this(DEFAULT_CAPACITY);
	}
	
	//accessor method for private size instance variable
	public int size() {
		return size;
	}
	
	//method to determine whether heap is empty
	public boolean isEmpty() {
		return size == 0;
	}
	
	//method to expand size of internal array if necessary
	private void expand() {
		@SuppressWarnings("unchecked")
		
		E[] newHeap = (E[]) new Comparable[heap.length *2];
		for (int i = 0; i < size(); i++) {
			newHeap[i] = heap[i];
		}
		heap = newHeap;
	}
	
	//method to swap two elements of the array given indices
	private void  swapElements(int index1, int index2) {
		E temp = heap[index1];
		heap[index1] = heap[index2];
		heap[index2] = temp;
	}
	
	//method that will get index of a node's parent node in the array given 
	//the index of the child
	private int getParentIndex(int childIndex) {
		//if odd, child is a left node
		if (childIndex % 2 != 0) {
			return childIndex /2;
		}
		//if even, child is a right node
		else {
			return childIndex / 2 - 1;
		}
	}
	//NOTE: derived from (2i+1) & (2i+2) indexing of left & right child notes (left children always at odd indices)
	
	//method to determine the smaller child index (if a position has 2 children)
	private int smallerChildIndex(int parentIndex) {
		int smaller = parentIndex;
		//get left child index by calculation based on parent index
		//look @ binary heap notes for help with this formula
		int leftChild = 2 * parentIndex +1;
		//if the left child index is in bounds of the heap...
		if (leftChild < size()-1) {
			//set smaller to left if left is smaller than parent
			if(heap[leftChild].compareTo(heap[smaller])<0)
				smaller = leftChild;
				//get left child index by calculation based on parent index
				//look back at binary heap notes for reminder
			int rightChild = leftChild + 1;
			//get right child index
			//if the right child index is in bounds of the heap...
			if (rightChild < size() -1) {
				//set smaller to right if right is smaller than parent
				if(heap[rightChild].compareTo(heap[smaller]) <0)
					smaller = rightChild;
			}
		}
		return smaller;
	}
	
	//method to insert an element into next available location of heap
	public void insert(E element) {
		//var that represents index that node will be inserted (always at the current size of array)
		int position = size();
	
		//check array length & expand heap with expand method if added element will not fit in the array
		if (position == heap.length) {
			expand();
		}
		
		//now increment size of the heap and add the element at the last index
		size++;
		heap[position] = element;
		//this addition may have destroyed the min heap property
		//code below moves node up in tree until its parent's value is less than its own
		int parentIndex = getParentIndex(position);
		
		while (position > 0 && heap[position].compareTo(heap[parentIndex])<0) {
			//if parent is greater, swap parent and node
			swapElements(position, parentIndex);
			//update position of the new element and find the next parent up
			position = parentIndex;
			parentIndex = getParentIndex(position);
		}
	}
	
	//main method
	public static void main(String[] args) {
		MinHeap<Integer> mh = new MinHeap<>();
		mh.insert(2);
		mh.insert(4);
		mh.insert(1);
		mh.insert(10);
		mh.insert(3);
		mh.insert(6);
		mh.insert(15);
		mh.insert(12);
		mh.insert(16);
		mh.insert(5);
		
		//loop that will remove all of the nodes from heap
		while(!mh.isEmpty()) {
			System.out.println(mh.remove());
		}
		System.out.println();
	}
	
	//method that removes the minimum node from the tree (always the root of the tree)
	public E remove(){
		if (isEmpty()) {
			return null;
		}
		
		//take out root and place last node at root position
		E min = heap[0];
		heap[0] = heap[size() -1];
		heap[size() - 1] = null; //set removed location to null
		size--;
		
		//swap the new root with lowest of its 2 child nodes until it's a higher value than its parent node
		//position of new root and its smaller child
		int position = 0;
		int smallerChildIndex = smallerChildIndex(position);
		
		//while there is a smaller child, swap parent and child
		while(smallerChildIndex != position) {
			swapElements(position, smallerChildIndex);
			//update position of node and get new smaller child
			position = smallerChildIndex;
			smallerChildIndex = smallerChildIndex(position);
		}
		return min;
	}
				
}


